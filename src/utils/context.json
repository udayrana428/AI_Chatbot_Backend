[
  {
    "file": "D:/Ebos/Chat_Bot/backend/src/utils/customParser.js",
    "lineNumber": 2,
    "content": [
      "const parseGeminiResponseToJson = (rawText) => {\r",
      "  const lines = rawText.split(\"\\n\");\r",
      "  const result = [];\r",
      "  let insideCodeBlock = false;\r",
      "  let insideTable = false;\r",
      "  let currentTable = [];\r",
      "\r",
      "  lines.forEach((line) => {\r",
      "    line = line.trim();\r",
      "\r",
      "    // Handle Code Block\r",
      "    if (line.startsWith(\"```\")) {\r",
      "      insideCodeBlock = !insideCodeBlock;\r",
      "      if (!insideCodeBlock) {\r",
      "        result.push({ type: \"code\", content: currentTable.join(\"\\n\") });\r",
      "        currentTable = [];\r",
      "      }\r",
      "      return;\r",
      "    }\r",
      "    if (insideCodeBlock) {\r",
      "      currentTable.push(line);\r",
      "      return;\r",
      "    }\r",
      "\r",
      "    // Handle Table\r",
      "    if (line.startsWith(\"|\") && line.endsWith(\"|\")) {\r",
      "      insideTable = true;\r",
      "      currentTable.push(line);\r",
      "      return;\r",
      "    }\r",
      "    if (insideTable && line.trim() === \"\") {\r",
      "      result.push({ type: \"table\", content: currentTable });\r",
      "      currentTable = [];\r",
      "      insideTable = false;\r",
      "      return;\r",
      "    }\r",
      "\r",
      "    // Handle Blockquote\r",
      "    if (line.startsWith(\">\")) {\r",
      "      result.push({ type: \"blockquote\", content: line.slice(1).trim() });\r",
      "      return;\r",
      "    }\r",
      "\r",
      "    // Handle Heading\r",
      "    if (line.startsWith(\"**\") && line.endsWith(\"**\")) {\r",
      "      result.push({\r",
      "        type: \"heading\",\r",
      "        content: line.replace(/\\*\\*/g, \"\").trim(),\r",
      "      });\r",
      "      return;\r",
      "    }\r",
      "\r",
      "    // Handle List\r",
      "    if (line.startsWith(\"* \")) {\r",
      "      if (result.length === 0 || result[result.length - 1].type !== \"list\") {\r",
      "        result.push({ type: \"list\", items: [] });\r",
      "      }\r",
      "      result[result.length - 1].items.push(line.replace(\"* \", \"\").trim());\r",
      "      return;\r",
      "    }\r",
      "\r",
      "    // Handle Paragraph\r",
      "    if (line.length > 0) {\r",
      "      result.push({ type: \"paragraph\", content: line });\r",
      "    }\r",
      "  });\r",
      "\r",
      "  return result;\r",
      "};\r",
      "\r",
      "export { parseGeminiResponseToJson };\r",
      ""
    ]
  },
  {
    "file": "D:/Ebos/Chat_Bot/backend/src/controllers/message.controller.js",
    "lineNumber": 111,
    "content": [
      "import mongoose from \"mongoose\";\r",
      "import { Chat } from \"../models/chat.model.js\";\r",
      "import { Message } from \"../models/message.model.js\";\r",
      "import { ApiError } from \"../utils/ApiError.js\";\r",
      "import { asyncHandler } from \"../utils/asyncHandler.js\";\r",
      "import uploadOnCloudinary from \"../utils/cloudinary.js\";\r",
      "import { emitSocketEvent } from \"../socket/index.js\";\r",
      "import { ChatEventEnum } from \"../constants.js\";\r",
      "import { ApiResponse } from \"../utils/ApiResponse.js\";\r",
      "import { generateGeminiResponse } from \"../services/geminiService.js\";\r",
      "import { parseGeminiResponseToJson } from \"../utils/customParser.js\";\r",
      "import { marked } from \"marked\";\r",
      "\r",
      "const chatMessageCommonAggregation = () => {\r",
      "  return [\r",
      "    {\r",
      "      $lookup: {\r",
      "        from: \"users\",\r",
      "        localField: \"sender\",\r",
      "        foreignField: \"_id\",\r",
      "        as: \"sender\",\r",
      "        pipeline: [\r",
      "          {\r",
      "            $project: {\r",
      "              username: 1,\r",
      "              email: 1,\r",
      "              avatar: 1,\r",
      "            },\r",
      "          },\r",
      "        ],\r",
      "      },\r",
      "    },\r",
      "    {\r",
      "      $addFields: {\r",
      "        sender: { $first: \"$sender\" },\r",
      "      },\r",
      "    },\r",
      "  ];\r",
      "};\r",
      "\r",
      "const getAllMessages = asyncHandler(async (req, res) => {\r",
      "  const { chatId } = req.params;\r",
      "\r",
      "  if (!chatId) throw new ApiError(400, \"chatId is required\");\r",
      "\r",
      "  if (!mongoose.Types.ObjectId.isValid(chatId)) {\r",
      "    return res\r",
      "      .status(400)\r",
      "      .json({ success: false, message: \"Invalid ObjectID format\" });\r",
      "  }\r",
      "\r",
      "  const selectedChat = await Chat.findById(chatId);\r",
      "\r",
      "  if (!selectedChat) throw new ApiError(404, \"Chat does not exist\");\r",
      "\r",
      "  const messages = await Message.aggregate([\r",
      "    {\r",
      "      $match: {\r",
      "        chatId: new mongoose.Types.ObjectId(chatId),\r",
      "      },\r",
      "    },\r",
      "    // ...chatMessageCommonAggregation(),\r",
      "    {\r",
      "      $sort: {\r",
      "        createdAt: -1,\r",
      "      },\r",
      "    },\r",
      "  ]);\r",
      "\r",
      "  if (!messages) throw new ApiError(500, \"Internal server error\");\r",
      "\r",
      "  return res\r",
      "    .status(200)\r",
      "    .json(\r",
      "      new ApiResponse(200, messages || [], \"Messages fetched successfully\")\r",
      "    );\r",
      "});\r",
      "\r",
      "const sendMessage = asyncHandler(async (req, res) => {\r",
      "  const { chatId } = req.params;\r",
      "  const { query } = req.body;\r",
      "\r",
      "  if (!query) throw new ApiError(400, \"Message query is required\");\r",
      "\r",
      "  if (!mongoose.Types.ObjectId.isValid(chatId)) {\r",
      "    return res\r",
      "      .status(400)\r",
      "      .json({ success: false, message: \"Invalid ObjectID format\" });\r",
      "  }\r",
      "\r",
      "  const selectedChat = await Chat.findById(chatId);\r",
      "\r",
      "  if (!selectedChat) throw new ApiError(404, \"Chat does not exist\");\r",
      "\r",
      "  const message = await Message.create({\r",
      "    content: query || \"\",\r",
      "    chatId: new mongoose.Types.ObjectId(chatId),\r",
      "    role: \"user\",\r",
      "  });\r",
      "\r",
      "  const geminiResponse = await generateGeminiResponse(query);\r",
      "\r",
      "  const receivedMessage = await Message.create({\r",
      "    chatId: new mongoose.Types.ObjectId(chatId),\r",
      "    content: geminiResponse,\r",
      "    role: \"assistant\",\r",
      "  });\r",
      "\r",
      "  if (!receivedMessage) throw new ApiError(500, \"Internal server error\");\r",
      "\r",
      "  const parsedJsonMessage = await parseGeminiResponseToJson(receivedMessage);\r",
      "\r",
      "  return res\r",
      "    .status(201)\r",
      "    .json(\r",
      "      new ApiResponse(201, parsedJsonMessage, \"Message saved successfully\")\r",
      "    );\r",
      "});\r",
      "\r",
      "const sendMessageGuest = asyncHandler(async (req, res) => {\r",
      "  const { query } = req.body;\r",
      "\r",
      "  if (!query) throw new ApiError(400, \"Message query is required\");\r",
      "\r",
      "  const geminiResponse = await generateGeminiResponse(query);\r",
      "\r",
      "  if (!geminiResponse) throw new ApiError(500, \"Internal server error\");\r",
      "\r",
      "  // const parsedJsonResponse = await parseGeminiResponseToJson(geminiResponse);\r",
      "  const rawParsedHtml = await marked.parse(geminiResponse);\r",
      "  const cleanParsedHtml = rawParsedHtml.replace(/\\n/g, \"\");\r",
      "\r",
      "  return res\r",
      "    .status(200)\r",
      "    .json(\r",
      "      new ApiResponse(200, cleanParsedHtml || \"\", \"Message saved successfully\")\r",
      "    );\r",
      "});\r",
      "\r",
      "export { getAllMessages, sendMessage, sendMessageGuest };\r",
      ""
    ]
  },
  {
    "file": "D:/Ebos/Chat_Bot/backend/src/utils/asyncHandler.js",
    "lineNumber": 9,
    "content": [
      "// export const asyncHandler = (requestHandler) => {\r",
      "//   return (req, res, next) => {\r",
      "//     Promise.resolve(requestHandler(req, res, next)).catch((err) => next(err));\r",
      "//   };\r",
      "// };\r",
      "\r",
      "export const asyncHandler = (requestHandler) => async (req, res, next) => {\r",
      "  try {\r",
      "    await requestHandler(req, res, next);\r",
      "  } catch (err) {\r",
      "    console.log(\"Caught error in asyncHandler: \", err);\r",
      "    res.status(err.code || 500).json({\r",
      "      success: false,\r",
      "      message: err.message,\r",
      "    });\r",
      "  }\r",
      "};\r",
      ""
    ]
  }
]